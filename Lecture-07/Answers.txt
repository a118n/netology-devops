Какой системный вызов делает команда cd? В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте. Вам нужно найти тот единственный, который относится именно к cd.

chdir()



Попробуйте использовать команду file на объекты разных типов на файловой системе. Например:
vagrant@netology1:~$ file /dev/tty
/dev/tty: character special (5/0)
vagrant@netology1:~$ file /dev/sda
/dev/sda: block special (8/0)
vagrant@netology1:~$ file /bin/bash
/bin/bash: ELF 64-bit LSB shared object, x86-64
Используя strace выясните, где находится база данных file на основании которой она делает свои догадки.

/usr/share/misc/magic.mgc



Предположим, приложение пишет лог в текстовый файл. Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет. Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается. Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла (чтобы освободить место на файловой системе).

 > /proc/$PID/fd/$FD
Либо использовать gdb.



Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?

Занимает PID. Физические нет.



В iovisor BCC есть утилита opensnoop. На какие файлы вы увидели вызов open за первую секунду работы утилиты? К сожалению, на данный момент готовых пакетов для Ubuntu 20.04 нет, поэтому, измените в Vagrantfile 20.04 временно на 18.04 для этого задания и воспользуйтесь инструкцией по установке.

Не увидел ничего. Только заголовки таблицы.


Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.

Вызов uname().
Part of the utsname information is also accessible via /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}
Ну и /proc/version.



Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#

В случае с ; команды будут запущены одна за другой, вне зависимости от того завершилась ли предыдущая команда верно.
Если чейнить через &&, то следующая за && команда запустится только при условии, что exit status предыдущей был 0, тоесть successful.



Есть ли смысл использовать в bash &&, если применить set -e?

Да, set -e не спасет от всех ошибок, например в цикле while/until, или if.



Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?

e - выйти если в пайплайне команда выдаст exit status отличный от 0 (тоесть ошибка)
u - считать неопределенные переменные и параметры ошибкой, и выходить при их наличии
x - выводить трейс команд перед выполнением. Также разворачивает переменные Полезно при дебаге.
o pipefail - предотвращает маскировку ошибок в пайплайнах. При наличии хоть одной ошибки, весь пайплайн будет считаться ошибочным. Без этой опции результат пайплайна будет зависеть от exit code последней команды.
В принципе, и так понятно зачем это все использовать в скриптах. Это избавит нас от непредвиденных результатов из-за ошибок.



Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов. Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).

Статусы S/Ss, I.
Маленькая s - лидер сессии (не совсем понятно что это значит)
< - высокий приоритет
+ - в группе процессов foreground
l - мульти-трединговый процесс
