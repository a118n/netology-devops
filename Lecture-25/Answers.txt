Задача 1
Используя docker поднимите инстанс PostgreSQL (версию 13). Данные БД сохраните в volume.
Подключитесь к БД PostgreSQL используя psql.
Воспользуйтесь командой \? для вывода подсказки по имеющимся в psql управляющим командам.
Найдите и приведите управляющие команды для:
вывода списка БД
подключения к БД
вывода списка таблиц
вывода описания содержимого таблиц
выхода из psql


docker run  --name postgres -d -e POSTGRES_PASSWORD=password -v postgres-data:/var/lib/postgresql/data postgres:13
docker exec -it postgres bash
su - postgres
psql

\l[+] - вывод списка БД
\c - подключение к БД
\dt[+] - вывод списка таблиц
\d[+] NAME - вывод описания содержимого таблиц
\q - выход из psql



Задача 2
Используя psql создайте БД test_database.
Изучите бэкап БД.
Восстановите бэкап БД в test_database.
Перейдите в управляющую консоль psql внутри контейнера.
Подключитесь к восстановленной БД и проведите операцию ANALYZE для сбора статистики по таблице.
Используя таблицу pg_stats столбец таблицы orders с наибольшим средним значением размера элементов в байтах.
Приведите в ответе команду, которую вы использовали для вычисления и полученный результат.


create database test_database;
\q
curl -LO https://raw.githubusercontent.com/netology-code/virt-homeworks/master/06-db-04-postgresql/test_data/test_dump.sql
psql test_database < test_dump.sql
psql
\c test_database
analyze verbose;
select max(avg_width) from pg_stats where tablename='orders';



Задача 3
Архитектор и администратор БД выяснили, что ваша таблица orders разрослась до невиданных размеров и поиск по ней занимает долгое время. Вам, как успешному выпускнику курсов DevOps в нетологии предложили провести разбиение таблицы на 2 (шардировать на orders_1 - price>499 и orders_2 - price<=499).
Предложите SQL-транзакцию для проведения данной операции.
Можно ли было изначально исключить "ручное" разбиение при проектировании таблицы orders?


alter table orders rename to orders_old;
create table orders (
    id integer not null,
    title character varying(80) not null,
    price integer default 0
) partition by range (price);
create table orders_1 partition of orders for values from ('500') to (maxvalue);
create table orders_2 partition of orders for values from ('0') to ('500');
insert into orders select * from orders_old;
drop table orders_old;



Задача 4
Используя утилиту pg_dump создайте бекап БД test_database.
Как бы вы доработали бэкап-файл, чтобы добавить уникальность значения столбца title для таблиц test_database?

pg_dump -U postgres test_database > backup_27112020

CREATE TABLE public.orders (
    id integer NOT NULL,
    title character varying(80) UNIQUE NOT NULL,
    price integer DEFAULT 0
)
PARTITION BY RANGE (price);
