Задача 1. Выбор инструментов.
Легенда
Через час совещание на котором менеджер расскажет о новом проекте. Начать работу над которым надо будет уже сегодня. На данный момент известно, что это будет сервис, который ваша компания будет предоставлять внешним заказчикам. Первое время, скорее всего, будет один внешних клиент, со временем внешних клиентов станет больше.
Так же по разговорам в компании есть вероятность, что техническое задание еще не четкое, что приведет к большому количеству небольших релизов, тестирований интеграций, откатов, доработок, то есть скучно не будет.
Вам, как девопс инженеру, будет необходимо принять решение об инструментах для организации инфраструктуры. На данный момент в вашей компании уже используются следующие инструменты:
остатки Сloud Formation,
некоторые образы сделаны при помощи Packer,
год назад начали активно использовать Terraform,
разработчики привыкли использовать Docker,
уже есть большая база Kubernetes конфигураций,
для автоматизации процессов используется Teamcity,
также есть совсем немного Ansible скриптов,
и ряд bash скриптов для упрощения рутинных задач.
Для этого в рамках совещания надо будет выяснить подробности о проекте, что бы в итоге определиться с инструментами:
Какой тип инфраструктуры будем использовать для этого проекта: изменяемый или не изменяемый?
Будет ли центральный сервер для управления инфраструктурой?
Будут ли агенты на серверах?
Будут ли использованы средства для управления конфигурацией или инициализации ресурсов?
В связи с тем, что проект стартует уже сегодня, в рамках совещания надо будет определиться со всеми этими вопросами.
В результате задачи необходимо
Ответить на четыре вопроса представленных в разделе "Легенда".
Какие инструменты из уже используемых вы хотели бы использовать для нового проекта?
Хотите ли рассмотреть возможность внедрения новых инструментов для этого проекта?
Если для ответа на эти вопросы недостаточно информации, то напишите какие моменты уточните на совещании.


Какой тип инфраструктуры будем использовать для этого проекта: изменяемый или не изменяемый?
Неизменяемый.

Будет ли центральный сервер для управления инфраструктурой?
Нет. Управление будет с любой машины через Terraform/Ansible и Git репозиторий.

Будут ли агенты на серверах?
Нет. Будем использовать agentless Ansible.

Будут ли использованы средства для управления конфигурацией или инициализации ресурсов?
Да. Terraform/Ansible.

Какие инструменты из уже используемых вы хотели бы использовать для нового проекта?
Terraform, Ansible, Packer, Docker, Kubernetes, TeamCity

Хотите ли рассмотреть возможность внедрения новых инструментов для этого проекта?
Думаю уже существующих будет достаточно.


Задача 2. Установка терраформ.
Официальный сайт: https://www.terraform.io/
Установите терраформ при помощи менеджера пакетов используемого в вашей операционной системе. В виде результата этой задачи приложите вывод команды terraform --version.


curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt update && sudo apt install -y terraform
terraform --version



Задача 3. Поддержка легаси кода.
В какой-то момент вы обновили терраформ до новой версии, например с 0.12 до 0.13. А код одного из проектов на столько устарел, что не может работать с версией 0.13. В связи с этим необходимо сделать так, чтобы вы могли одновременно использовать последнюю версию терраформа установленную при помощи штатного менеджера пакетов и устаревшую версию 0.12.
В виде результата этой задачи приложите вывод --version двух версий терраформа доступных на вашем компьютере или виртуальной машине.

cd /usr/local/bin
sudo curl -LO https://releases.hashicorp.com/terraform/0.12.29/terraform_0.12.29_linux_amd64.zip
sudo unzip terraform_0.12.29_linux_amd64.zip
sudo rm -f terraform_0.12.29_linux_amd64.zip
sudo mv terraform terraform_0.12

terraform --version # latest version from repo
terraform_0.12 --version # manually installed version 0.12
