На лекции мы обсудили, что манипулировать размером окна необходимо для эффективного наполнения приемного буфера участников TCP сессии (Flow Control). Подобная проблема в полной мере возникает в сетях с высоким RTT. Например, если вы захотите передать 500 Гб бэкап из региона Юга-Восточной Азии на Восточное побережье США. Здесь вы можете увидеть и 200 и 400 мс вполне реального RTT. Подсчитайте, какого размера нужно окно TCP чтобы наполнить 1 Гбит/с канал при 300 мс RTT (берем простую ситуацию без потери пакетов). Можно воспользоваться готовым калькулятором. Ознакомиться с формулами, по которым работает калькулятор можно, например, на Wiki.

37500000 байт.



Во сколько раз упадет пропускная способность канала, если будет 1% потерь пакетов при передаче?

Насколько я понял до 0.389333 Mbit/s


Какая максимальная реальная скорость передачи данных достижима при линке 100 Мбит/с? Вопрос про TCP payload, то есть цифры, которые вы реально увидите в операционной системе в тестах или в браузере при скачивании файлов. Повлияет ли размер фрейма на это?

94.9285 Mbit/s или 11.866 mbps при стандартном MTU 1500. Размер фрейма повлияет, т.к. при увеличении будет меньше пакетов, следовательно меньше оверхеда, насколько я понял.



Что на самом деле происходит, когда вы открываете сайт? :) На прошлой лекции был приведен сокращенный вариант ответа на этот вопрос. Теперь вы знаете намного больше, в частности про IP адресацию, DNS и т.д. Опишите максимально подробно насколько вы это можете сделать, что происходит, когда вы делаете запрос curl -I http://netology.ru с вашей рабочей станции. Предположим, что arp кеш очищен, в локальном DNS нет закешированных записей.

1. Система смотрит в /etc/nsswitch.conf куда обращаться за резолвом имен. Допустим, это стандартный порядок files dns.
2. В /etc/hosts данного имени нет, следовательно система идет в /etc/resolv.conf и обращается к первому прописанному dns-серверу
3. Скорее всего это какой-то локальный кэширующий dns, либо адрес роутера, поэтому запрос уходит на dns провайдера и дальше реальным dns серверам, пока не будет получен авторитативный ответ с A-записью ().
3. Сервер отдает ей ip-адрес, предположим 104.26.9.143.
4. Система понимает, что этот адрес не в ее подсети. Если ARP-кэш пустой, то система посылает широковещательный ARP-запрос чтобы узнать MAC шлюза и формирует пакет на свой шлюз по-умолчанию (скорее всего это домашний роутер)
5. Роутер также перенаправляет пакет дальше провайдеру, а провайдер дальше, пока не доберется до искомого адреса
6. Искомый хост отвечает на этот пакет и создается TCP-сессия
7. По GET /  http-запросу нам сервер отдает страничку



Сколько и каких итеративных запросов будет сделано при резолве домена www.google.co.uk?

vagrant@ubuntu-20:~$ dig www.google.co.uk -4 +trace +nodnssec

; <<>> DiG 9.16.1-Ubuntu <<>> www.google.co.uk -4 +trace +nodnssec
;; global options: +cmd
.                       6305    IN      NS      j.root-servers.net.
.                       6305    IN      NS      b.root-servers.net.
.                       6305    IN      NS      i.root-servers.net.
.                       6305    IN      NS      h.root-servers.net.
.                       6305    IN      NS      c.root-servers.net.
.                       6305    IN      NS      a.root-servers.net.
.                       6305    IN      NS      l.root-servers.net.
.                       6305    IN      NS      m.root-servers.net.
.                       6305    IN      NS      e.root-servers.net.
.                       6305    IN      NS      d.root-servers.net.
.                       6305    IN      NS      f.root-servers.net.
.                       6305    IN      NS      g.root-servers.net.
.                       6305    IN      NS      k.root-servers.net.
;; Received 239 bytes from 127.0.0.53#53(127.0.0.53) in 0 ms

uk.                     172800  IN      NS      nsa.nic.uk.
uk.                     172800  IN      NS      dns3.nic.uk.
uk.                     172800  IN      NS      nsd.nic.uk.
uk.                     172800  IN      NS      nsb.nic.uk.
uk.                     172800  IN      NS      nsc.nic.uk.
uk.                     172800  IN      NS      dns1.nic.uk.
uk.                     172800  IN      NS      dns4.nic.uk.
uk.                     172800  IN      NS      dns2.nic.uk.
;; Received 465 bytes from 192.36.148.17#53(i.root-servers.net) in 43 ms

google.co.uk.           172800  IN      NS      ns1.google.com.
google.co.uk.           172800  IN      NS      ns4.google.com.
google.co.uk.           172800  IN      NS      ns3.google.com.
google.co.uk.           172800  IN      NS      ns2.google.com.
;; Received 155 bytes from 156.154.102.3#53(nsc.nic.uk) in 39 ms

www.google.co.uk.       300     IN      A       108.177.14.94
;; Received 61 bytes from 216.239.32.10#53(ns1.google.com) in 63 ms

Т.е 4 запроса.



Сколько доступно для назначения хостам адресов в подсети /25? А в подсети с маской 255.248.0.0. Постарайтесь потренироваться в ручных вычислениях чтобы немного набить руку, не пользоваться калькулятором сразу.

/25 - это получается 192.168.0.1 - 192.168.0.127, т.е 126 адресов, включая шлюз. 127 - броадкаст.
255.248.0.0 - 524286 адресов.


В какой подсети больше адресов, в /23 или /24?

/23



Получится ли разделить диапазон 10.0.0.0/8 на 128 подсетей по 131070 адресов в каждой? Какая маска будет у таких подсетей?

Да, получится. Маска /15.
