Задача 1
В этом задании вы потренируетесь в:
установке elasticsearch
первоначальном конфигурировании elastcisearch
запуске elasticsearch в docker
Используя докер образ centos:7 как базовый и документацию по установке и запуску Elastcisearch:
составьте Dockerfile-манифест для elasticsearch
соберите docker-образ и сделайте push в ваш docker.io репозиторий
запустите контейнер из получившегося образа и выполните запрос пути / c хост-машины
Требования к elasticsearch.yml:
данные path должны сохраняться в /var/lib
имя ноды должно быть netology_test
В ответе приведите:
текст Dockerfile манифеста
ссылку на образ в репозитории dockerhub
ответ elasticsearch на запрос пути / в json виде
Подсказки:
возможно вам понадобится установка пакета perl-Digest-SHA для корректной работы пакета shasum
при сетевых проблемах внимательно изучите кластерные и сетевые настройки в elasticsearch.yml
при некоторых проблемах вам поможет docker директива ulimit
elasticsearch в логах обычно описывает проблему и пути ее решения
Далее мы будем работать с данным экземпляром elasticsearch.

https://hub.docker.com/r/electricdrop/elasticsearch

docker build -t electricdrop/elasticsearch:7 .
docker login && docker push electricdrop/elasticsearch:7
docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch electricdrop/elasticsearch:7
docker logs -f elasticsearch (убедиться что нет ошибок)
curl -X GET "localhost:9200/"



Задача 2
В этом задании вы научитесь:
создавать и удалять индексы
изучать состояние кластера
обосновывать причину деградации доступности данных
Ознакомтесь с документацией и добавьте в elasticsearch 3 индекса, в соответствии со таблицей:
Имя	Количество реплик	Количество шард
ind-1	0	1
ind-2	1	2
ind-3	2	4
Получите список индексов и их статусов, используя API и приведите в ответе на задание.
Получите состояние кластера elasticsearch, используя API.
Как вы думаете, почему часть индексов и кластер находится в состоянии yellow?
Удалите все индексы.

Создаем индексы:
curl -X PUT "localhost:9200/ind-1?pretty" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index": {
      "number_of_shards": 1,
      "number_of_replicas": 0
    }
  }
}
'
curl -X PUT "localhost:9200/ind-2?pretty" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index": {
      "number_of_shards": 2,
      "number_of_replicas": 1
    }
  }
}
'
curl -X PUT "localhost:9200/ind-3?pretty" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index": {
      "number_of_shards": 4,
      "number_of_replicas": 2
    }
  }
}
'

Получаем список индексов:
curl -X GET "localhost:9200/_cat/indices/ind-*?v&s=index&pretty"

Состояние кластера:
curl -X GET "localhost:9200/_cluster/health?pretty"

Желтые - те индексы, в которых мы указывали реплики, но реплик нет. Соответственно и кластер желтый, т.к. имеются желтые индексы.

Удаляем индексы:
curl -X DELETE "localhost:9200/_all?pretty"



Задача 3
В данном задании вы научитесь:
создавать бэкапы данных
восстанавливать индексы из бэкапов
Создайте директорию {путь до корневой директории с elasticsearch в образе}/snapshots.
Используя API зарегистрируйте данную директорию как snapshot repository c именем netology_backup.
Приведите в ответе запрос API и результат вызова API для создания репозитория.
Создайте индекс test с 0 реплик и 1 шардом и приведите в ответе список индексов.
Создайте snapshot состояния кластера elasticsearch.
Приведите в ответе список файлов в директории со snapshotами.
Удалите индекс test и создайте индекс test-2. Приведите в ответе список индексов.
Восстановите состояние кластера elasticsearch из snapshot, созданного ранее.
Приведите в ответе запрос к API восстановления и итоговый список индексов.
Подсказки:
возможно вам понадобится доработать elasticsearch.yml в части директивы path.repo и перезапустить elasticsearch


Директорию решил создать еще на этапе билда образа докера, по пути: /var/lib/elasticsearch/snapshots

Создаем снэпшот:
curl -X PUT "localhost:9200/_snapshot/netology_backup?pretty" -H 'Content-Type: application/json' -d'
{
  "type": "fs",
  "settings": {
    "location": "/var/lib/elasticsearch/snapshots"
  }
}
'
Проверяем:
curl -X GET "localhost:9200/_snapshot/netology_backup?pretty"

Создаем индекс:
curl -X PUT "localhost:9200/test?pretty" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index": {
      "number_of_shards": 1,
      "number_of_replicas": 0
    }
  }
}
'
Cписок индексов:
curl -X GET "localhost:9200/_cat/indices/_all?v&s=index&pretty"

Создаем бэкап:
curl -X PUT "localhost:9200/_snapshot/netology_backup/snapshot_1?wait_for_completion=true&pretty"

Список файлов:
docker exec -it elasticsearch ls -l /var/lib/elasticsearch/snapshots

Удаляем индекс:
curl -X DELETE "localhost:9200/test?pretty"

Создаем индекс test-2:
curl -X PUT "localhost:9200/test-2?pretty" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index": {
      "number_of_shards": 1,
      "number_of_replicas": 0
    }
  }
}
'
curl -X GET "localhost:9200/_cat/indices/_all?v&s=index&pretty"

Восстанавливаем кластер из бэкапа:
curl -X POST "localhost:9200/_snapshot/netology_backup/snapshot_1/_restore?pretty"

Cписок индексов:
curl -X GET "localhost:9200/_cat/indices/_all?v&s=index&pretty"

В итоге индекс test восстановился, индекс test-2 также присутствует, т.е. бэкап не полностью замещает содержимое кластера.
